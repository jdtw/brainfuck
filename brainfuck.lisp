;;;; brainfuck.lisp

(in-package #:brainfuck)

(defparameter *hello-world* "
++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..++
+.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")

(defparameter *99-bottles* "
>+++++++++[<+++++++++++>-]<[>[-]>[-]<<[>+>+<<-]>>[<<+>>-]>>>
[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<++++++++++>>>+<
-]<<-<-]+++++++++>[<->-]>>+>[<[-]<<+>>>-]>[-]+<<[>+>-<<-]<<<
[>>+>+<<<-]>>>[<<<+>>>-]>[<+>-]<<-[>[-]<[-]]>>+<[>[-]<-]<+++
+++++[<++++++<++++++>>-]>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-
]<<<<<<.>>[-]>[-]++++[<++++++++>-]<.>++++[<++++++++>-]<++.>+
++++[<+++++++++>-]<.><+++++..--------.-------.>>[>>+>+<<<-]>
>>[<<<+>>>-]<[<<<<++++++++++++++.>>>>-]<<<<[-]>++++[<+++++++
+>-]<.>+++++++++[<+++++++++>-]<--.---------.>+++++++[<------
---->-]<.>++++++[<+++++++++++>-]<.+++..+++++++++++++.>++++++
++[<---------->-]<--.>+++++++++[<+++++++++>-]<--.-.>++++++++
[<---------->-]<++.>++++++++[<++++++++++>-]<++++.-----------
-.---.>+++++++[<---------->-]<+.>++++++++[<+++++++++++>-]<-.
>++[<----------->-]<.+++++++++++..>+++++++++[<---------->-]<
-----.---.>>>[>+>+<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>>+++
+[<++++++>-]<--.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.
><+++++..--------.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++
++++++++++++.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<++
+++++++>-]<--.---------.>+++++++[<---------->-]<.>++++++[<++
+++++++++>-]<.+++..+++++++++++++.>++++++++++[<---------->-]<
-.---.>+++++++[<++++++++++>-]<++++.+++++++++++++.++++++++++.
------.>+++++++[<---------->-]<+.>++++++++[<++++++++++>-]<-.
-.---------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-
]<--.+++++++++++.++++++++.---------.>++++++++[<---------->-]
<++.>+++++[<+++++++++++++>-]<.+++++++++++++.----------.>++++
+++[<---------->-]<++.>++++++++[<++++++++++>-]<.>+++[<----->
-]<.>+++[<++++++>-]<..>+++++++++[<--------->-]<--.>+++++++[<
++++++++++>-]<+++.+++++++++++.>++++++++[<----------->-]<++++
.>+++++[<+++++++++++++>-]<.>+++[<++++++>-]<-.---.++++++.----
---.----------.>++++++++[<----------->-]<+.---.[-]<<<->[-]>[
-]<<[>+>+<<-]>>[<<+>>-]>>>[-]<<<+++++++++<[>>>+<<[>+>[-]<<-]
>[<+>-]>[<<++++++++++>>>+<-]<<-<-]+++++++++>[<->-]>>+>[<[-]<
<+>>>-]>[-]+<<[>+>-<<-]<<<[>>+>+<<<-]>>>[<<<+>>>-]<>>[<+>-]<
<-[>[-]<[-]]>>+<[>[-]<-]<++++++++[<++++++<++++++>>-]>>>[>+>+
<<-]>>[<<+>>-]<[<<<<<.>>>>>-]<<<<<<.>>[-]>[-]++++[<++++++++>
-]<.>++++[<++++++++>-]<++.>+++++[<+++++++++>-]<.><+++++..---
-----.-------.>>[>>+>+<<<-]>>>[<<<+>>>-]<[<<<<++++++++++++++
.>>>>-]<<<<[-]>++++[<++++++++>-]<.>+++++++++[<+++++++++>-]<-
-.---------.>+++++++[<---------->-]<.>++++++[<+++++++++++>-]
<.+++..+++++++++++++.>++++++++[<---------->-]<--.>+++++++++[
<+++++++++>-]<--.-.>++++++++[<---------->-]<++.>++++++++[<++
++++++++>-]<++++.------------.---.>+++++++[<---------->-]<+.
>++++++++[<+++++++++++>-]<-.>++[<----------->-]<.+++++++++++
..>+++++++++[<---------->-]<-----.---.+++.---.[-]<<<]")

(defstruct bf-state
  (mem (make-array 30000 :element-type '(unsigned-byte 8) :initial-element 0))
  (ip 0)
  (ptr 0)
  (program ""))

(defmacro with-bf-slots ((mem ip ptr program) state &body body)
  (let ((s (gensym)))
    `(let ((,s ,state))
       (symbol-macrolet ((,mem (bf-state-mem ,s))
                         (,ip (bf-state-ip ,s))
                         (,ptr (bf-state-ptr ,s))
                         (,program (bf-state-program ,s)))
         ,@body))))


(defmacro find-bracket (str pos &optional backwards)
  (let ((s (gensym))
        (p (gensym))
        (back (gensym))
        (open (gensym))
        (close (gensym))
        (depth (gensym))
        (c (gensym)))
    `(let* ((,s ,str)
            (,p ,pos)
            (,back ,backwards)
            (,open (if ,back #\] #\[))
            (,close (if ,back #\[ #\])))
       (loop with ,depth = 0 for ,c = (char ,s ,p) do
            (cond 
              ((eq ,c ,open)
               (incf ,depth))
              ((eq ,c ,close)
               (progn
                 (decf ,depth)
                 (when (zerop ,depth)
                   (return ,p)))))
            (if ,back (decf ,p) (incf ,p))))))

(defun bf-eval (state)
  (with-bf-slots (mem ip ptr program) state
    (let ((length (length program)))
      (loop while (< ip length) do 
           (case (char program ip)
             (#\> (incf ptr)
                  (incf ip))
             (#\< (decf ptr)
                  (incf ip))
             (#\+ (setf (aref mem ptr) (mod (1+ (aref mem ptr)) #x100))
                  (incf ip))
             (#\- (setf (aref mem ptr) (mod (1- (aref mem ptr)) #x100))
                  (incf ip))
             (#\. (write-char (code-char (aref mem ptr)))
                  (incf ip))
             (#\, (setf (aref mem ptr) (char-code (read-char)))
                  (incf ip))
             (#\[ (if (zerop (aref mem ptr))
                      (setf ip (find-bracket program ip))
                      (incf ip)))
             (#\] (if (not (zerop (aref mem ptr)))
                      (setf ip (find-bracket program ip t))
                      (incf ip)))
             (otherwise (incf ip)))))))

(defun bf-repl ()
  (loop do
       (princ "BRAINFUCK> ")
       (let ((line (read-line)))
         (if (equal line "")
             (return)
             (bf-eval (make-bf-state :program line))))))
